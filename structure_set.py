# 晶体结构生成器 - 简单格式输出
# 输入结构名称，输出坐标定义和cylinders连接
def generate_truncated_cuboctahedron(S=2.5, slider=4):
    """生成截角立方八面体"""
    import math, itertools

    # slider_list: 包含所有产生96条边的slider值
    # 索引0-32对应33个不同的96边配置
    slider_list = [
        0, 1, 2,
        3, 4,
        # 4.1, 4.2, 4.4, 4.5, 4.6, 4.8, 
        4.9,6,7, 
        # 7.1, 7.3, 7.4, 
        7.5,
        # 7.6, 7.7, 
        8.0, 
        # 8.1, 9,
        9.1,
        # 9.4, 9.5
    ]

    # 将传入的slider参数映射到slider_list中的有效值
    # 使用模运算确保索引始终在有效范围内
    actual_slider = slider_list[slider % len(slider_list)]

    a = 1.0
    b = 1.0 + math.sqrt(2.0)
    c = 1.0 + math.sqrt(2.0)*(2.0+0.1*(actual_slider-4))
    
    verts = set()
    for perm in set(itertools.permutations((a, b, c), 3)):
        for s1, s2, s3 in itertools.product((-1.0, 1.0), repeat=3):
            verts.add((s1*perm[0], s2*perm[1], s3*perm[2]))
    verts = list(verts)
    
    scale = S / c
    V = [(scale*x, scale*y, scale*z) for (x, y, z) in verts]

    # 使用多边长检测：识别截角立方八面体的所有有效边长类型
    # 计算所有顶点间距离并进行聚类分析
    distances = []
    pairs = []
    n = len(V)
    for i in range(n):
        xi, yi, zi = V[i]
        for j in range(i+1, n):
            xj, yj, zj = V[j]
            d2 = (xi-xj)*(xi-xj) + (yi-yj)*(yi-yj) + (zi-zj)*(zi-zj)
            d = (d2)**0.5
            distances.append(d)
            pairs.append((i, j, d))

    # 识别主要的边长组（按距离分组，找到有足够连接数的组）
    distances_sorted = sorted(set(distances))
    valid_edge_lengths = []

    # 找到前几个最短距离组作为有效边长，但排除最长的边长组（对角线）
    edge_group_info = []
    for d in distances_sorted[:6]:  # 检查前6个最短距离
        count = sum(1 for dist in distances if abs(dist - d) < 1e-6)
        if count >= 12:  # 降低最小边数要求以捕获所有组
            edge_group_info.append((d, count))

    # 按边数排序，优先选择边数多的组，但排除最长的边长组
    edge_group_info.sort(key=lambda x: x[0])  # 按长度排序

    # 计算目标边数，移除最长的边长组直到接近72条边
    total_edges_available = sum(count for _, count in edge_group_info)
    target_edges = 72

    valid_edge_lengths = []
    current_edge_count = 0

    # 从最短的边长组开始添加，直到接近目标边数
    for length, count in edge_group_info:
        if current_edge_count + count <= target_edges + 12:  # 允许一些超出
            valid_edge_lengths.append(length)
            current_edge_count += count

        # 如果已经接近或达到目标，停止添加
        if current_edge_count >= target_edges:
            break

    # 使用筛选后的边长检测连接
    Eset = set()
    for i, j, d in pairs:
        for valid_length in valid_edge_lengths:
            if abs(d - valid_length) < 1e-6:
                Eset.add((i, j))
                break
    
    coord_strings = []
    for i, (x, y, z) in enumerate(V):
        coord_strings.append(f"V{i+1:02d} = [{x:8.4f}, {y:8.4f}, {z:8.4f}]")
    
    cylinder_strings = []
    for (i, j) in sorted(Eset):
        cylinder_strings.append(f"(V{i+1:02d}, V{j+1:02d})")
    
    return {
        'coords': coord_strings,
        'cylinders': cylinder_strings
    }

def get_crystal_structure(structure_name, slider=4):
    """根据结构名称返回格式化的坐标和连接定义

    Args:
        structure_name: 结构名称
        slider: 滑块值 (0-8)，用于控制BCC/BCCZ结构中O原子的位置
    """

    h = 1  # Used for Truncated_octahedron

    # slider值到O坐标的映射 (slider=4为默认中心位置)
    def get_o_coordinates(slider_value):
        # 8个位置的坐标映射 (立方体的8个象限)
        positions = {

            0: [1, 1, 0],
            1: [1, 0,  0],  
            2: [1, -1, 0],

            3: [0, 1, 0],
            4: [0, 0, 0],
            5: [0, -1, 0],

            6: [1, 1,1],
            7: [1, 0, 1],
            8: [1, -1, 1]
        }
        return positions.get(slider_value, [0, 0, 0])  # 默认返回中心位置

    # 获取当前slider对应的O坐标
    o_coords = get_o_coordinates(slider)

    structures = {
        'Cubic': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]", 
                "C = [ 2.5, -2.5,  2.5]",
                "D = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]", 
                "D_ = [-2.5, -2.5, -2.5]"
            ],
            'cylinders': [
                "(A, B)", "(B, C)", "(C, D)", "(D, A)",
                "(A_, B_)", "(B_, C_)", "(C_, D_)", "(D_, A_)",
                "(A, A_)", "(B, B_)", "(C, C_)", "(D, D_)"
            ]
        },
        
        'BCC': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5, -2.5,  2.5]",
                "D = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",
                f"O = [{o_coords[0]}, {o_coords[1]}, {o_coords[2]}]"
            ],
            'cylinders': [
                "(O, A)", "(O, B)", "(O, C)", "(O, D)",
                "(O, A_)", "(O, B_)", "(O, C_)", "(O, D_)"
            ]
        },
        
        'BCCZ': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5, -2.5,  2.5]",
                "D = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",
                f"O = [{o_coords[0]}, {o_coords[1]}, {o_coords[2]}]"
            ],
            'cylinders': [
                "(O, A)", "(O, B)", "(O, C)", "(O, D)",
                "(O, A_)", "(O, B_)", "(O, C_)", "(O, D_)",
                "(A, D)", "(B, C)", "(B_, C_)", "(A_, D_)"
            ]
        },
        
        'Octet_truss': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5, -2.5,  2.5]",
                "D = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",

                #  4个面心点
                f"E1 = [ 0.0000,  2.5,  0.0000]",  # 前面中心 - 连接A-B_
                f"E3 = [ 0.0000, -2.5,  0.0000]",  # 后面中心 - 连接C-D_

                f"E2 = [ {0.25*(2+slider)},  0.0000,  0.0000]",  # 右面中心 - 连接B_-C
                f"E4 = [-{0.25*(2+slider)},  0.0000,  0.0000]" ,  # 左面中心 - 连接D_-A
                f"E5 = [0.0000,  0.0000,  {0.25*(2+slider)}]",
                f"E6 = [0.0000,  0.0000,  -{0.25*(2+slider)}]",
            ],

            'cylinders': [
                # 8条原始连接通过4个面心点分解为16条

                # 第一组连接（4条）- 通过面心点分解
                "(A, E1)",   "(E1, B_)",   # A-B_ 分解
                "(B_, E2)",  "(E2, C)",    # B_-C 分解
                "(C, E3)",   "(E3, D_)",   # C-D_ 分解
                "(D_, E4)",  "(E4, A)",    # D_-A 分解

                "(A, E5)",   "(E5, C)",
                "(B, E5)",   "(E5, D)",
                "(A_, E6)",   "(E6, C_)",
                # "(B_, E6)",   "(E6, D)",
                "(B_, E6)",   "(E6, D_)",
                # 第二组连接（4条）- 通过面心点分解
                "(A_, E1)",  "(E1, B)",    # A_-B 分解（通过左面中心）
                "(B, E2)",   "(E2, C_)",   # B-C_ 分解（通过前面中心）
                "(C_, E3)",  "(E3, D)",    # C_-D 分解（通过右面中心）
                "(D, E4)",   "(E4, A_)",   # D-A_ 分解（通过后面中心）
                "(E1, E2)", "(E1, E4)", "(E1, E5)", "(E1, E6)", "(E2, E3)",
                "(E2, E5)", "(E2, E6)", "(E3, E4)", "(E3, E5)", "(E3, E6)",
                "(E4, E5)", "(E4, E6)", "(E5, E6)",

            ]

            
        },

        
        'AFCC': {
                'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5, -2.5,  2.5]",
                "D = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",

                #  4个面心点
                f"E1 = [ 0.0000,  2.5,  0.0000]",  # 前面中心 - 连接A-B_
                f"E3 = [ 0.0000, -2.5,  0.0000]",  # 后面中心 - 连接C-D_
                
                f"E2 = [ {0.25*(2+slider)},  0.0000,  0.0000]",  # 右面中心 - 连接B_-C  
                f"E4 = [-{0.25*(2+slider)},  0.0000,  0.0000]" ,  # 左面中心 - 连接D_-A

                f"E5 = [0.0000,  0.0000,  {0.25*(2+slider)}]",
                f"E6 = [0.0000,  0.0000,  -{0.25*(2+slider)}]",
            ],

            'cylinders': [
                # 8条原始连接通过4个面心点分解为16条
                
                # 第一组连接（4条）- 通过面心点分解
                "(A, E1)",   "(E1, B_)",   # A-B_ 分解
                "(B_, E2)",  "(E2, C)",    # B_-C 分解  
                "(C, E3)",   "(E3, D_)",   # C-D_ 分解
                "(D_, E4)",  "(E4, A)",    # D_-A 分解

                "(A, E5)",   "(E5, C)",
                "(B, E5)",   "(E5, D)",
                "(A_, E6)",   "(E6, C_)",
                "(B_, E6)",   "(E6, D_)",
                # 第二组连接（4条）- 通过面心点分解
                "(A_, E1)",  "(E1, B)",    # A_-B 分解（通过左面中心）
                "(B, E2)",   "(E2, C_)",   # B-C_ 分解（通过前面中心）
                "(C_, E3)",  "(E3, D)",    # C_-D 分解（通过右面中心）
                "(D, E4)",   "(E4, A_)",   # D-A_ 分解（通过后面中心）
            ]
            },
        
        'FCCZ': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5,  2.5, -2.5]",
                "D = [-2.5,  2.5, -2.5]",
                "A_ = [-2.5, -2.5,  2.5]",
                "B_ = [ 2.5, -2.5,  2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",

                #  4个面心点
                f"E1 = [ 0.0000,  0.0000,  {0.25*(2+slider)}]",  # 前面中心 - 连接A_-B和A-B_
                f"E2 = [ {0.25*(2+slider)},  0.0000,  0.0000]",  # 右面中心 - 连接B-C_和B_-C
                f"E3 = [ 0.0000,  0.0000, -{0.25*(2+slider)}]",  # 后面中心 - 连接C_-D和C-D_
                f"E4 = [-{0.25*(2+slider)},  0.0000,  0.0000]"   # 左面中心 - 连接D-A_和D_-A
            ],
            'cylinders': [
                # 8条原始对角连接通过4个面心点分解为16条短连接

                # 第一组连接（4条）- 通过面心点分解
                "(A_, E1)",  "(E1, B)",   # A_-B 分解（通过前面中心）
                "(B, E2)",   "(E2, C_)",  # B-C_ 分解（通过右面中心）
                "(C_, E3)",  "(E3, D)",   # C_-D 分解（通过后面中心）
                "(D, E4)",   "(E4, A_)",  # D-A_ 分解（通过左面中心）

                # 第二组连接（4条）- 通过面心点分解
                "(A, E1)",   "(E1, B_)",  # A-B_ 分解（通过前面中心）
                "(B_, E2)",  "(E2, C)",   # B_-C 分解（通过右面中心）
                "(C, E3)",   "(E3, D_)",  # C-D_ 分解（通过后面中心）
                "(D_, E4)",  "(E4, A)",   # D_-A 分解（通过左面中心）

                # 保留垂直连接（4条）
                "(A, A_)", "(B, B_)", "(C, C_)", "(D, D_)"
            ]
        },
        
        'Tetrahedron_base': {
            'coords': [
                "A  = [-2.5,  2.5,  2.5]",
                "B  = [ 2.5,  2.5,  2.5]",
                "C  = [ 2.5, -2.5,  2.5]",
                "D  = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",
                f"O = [{o_coords[0]}, {o_coords[1]}, {o_coords[2]}]",

            ],
            'cylinders': [
                "(A, A_)", "(A_, B_)", "(B_, B)", "(B, A)",
                "(A, D)", "(B, C)", "(A_, D_)", "(B_, C_)",
                "(D, C)", "(C, C_)", "(C_, D_)", "(D_, D)",

                "(A, O)", "(B, O)", "(C, O)", "(D, O)",
                "(A_, O)", "(B_, O)", "(C_, O)", "(D_, O)",

                "(A, B_)","(B, C_)","(C,D_)","(D,A_)",
            ]
        },

        
        'Iso_truss': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5, -2.5,  2.5]",
                "D = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",
                "A1 = [0,  0,  3]",
                "B1 = [0,  3,  0]",
                "C1 = [3,  0,  0]",
                "A1_ = [0,  0, -3]",
                "B1_ = [0, -3,  0]",
                "C1_ = [-3, 0,  0]",
                f"O = [{o_coords[0]}, {o_coords[1]}, {o_coords[2]}]"
            ],
            'cylinders': [
                "(A, B)", "(B, C)", "(C, D)", "(D, A)",
                "(A_, B_)", "(B_, C_)", "(C_, D_)", "(D_, A_)",
                "(A, A_)", "(B, B_)", "(C, C_)", "(D, D_)",
                "(A, C)", "(B, D)", "(A_, C_)", "(B_, D_)",
                "(O, A)", "(O, B)", "(O, C)", "(O, D)",
                "(O, A_)", "(O, B_)", "(O, C_)", "(O, D_)",
                "(O, A1)", "(O, B1)", "(O, C1)",
                "(O, A1_)", "(O, B1_)", "(O, C1_)"
            ]
        },
        
        'G7': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5,  2.5, -2.5]",
                "D = [-2.5,  2.5, -2.5]",
                "A_ = [-2.5, -2.5,  2.5]",
                "B_ = [ 2.5, -2.5,  2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",
                f"O = [{o_coords[0]}, {o_coords[1]}, {o_coords[2]}]"
            ],
            'cylinders': [
                # 上方形框
                "(A, B)", "(B, C)", "(C, D)", "(D, A)",
                # 下方形框
                "(A_, B_)", "(B_, C_)", "(C_, D_)", "(D_, A_)",
                # 中心点连上下顶点
                "(O, A)", "(O, B)", "(O, C)", "(O, D)",
                "(O, A_)", "(O, B_)", "(O, C_)", "(O, D_)"
            ]
        },

        'FCC' :{
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5,  2.5, -2.5]",
                "D = [-2.5,  2.5, -2.5]",
                "A_ = [-2.5, -2.5,  2.5]",
                "B_ = [ 2.5, -2.5,  2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",

                #  4个面心点
                f"E1 = [ 0.0000,  0.0000,  {0.25*(2+slider)}]",  # 前面中心 - 连接A-B_
                f"E2 = [ {0.25*(2+slider)},  0.0000,  0.0000]",  # 右面中心 - 连接B_-C
                f"E3 = [ 0.0000,  0.0000, -{0.25*(2+slider)}]",  # 后面中心 - 连接C-D_
                f"E4 = [-{0.25*(2+slider)},  0.0000,  0.0000]"   # 左面中心 - 连接D_-A
            ],

            'cylinders': [
                # 8条原始连接通过4个面心点分解为16条
                
                # 第一组连接（4条）- 通过面心点分解
                "(A, E1)",   "(E1, B_)",   # A-B_ 分解
                "(B_, E2)",  "(E2, C)",    # B_-C 分解  
                "(C, E3)",   "(E3, D_)",   # C-D_ 分解
                "(D_, E4)",  "(E4, A)",    # D_-A 分解
                
                # 第二组连接（4条）- 通过面心点分解
                "(A_, E1)",  "(E1, B)",    # A_-B 分解（通过左面中心）
                "(B, E2)",   "(E2, C_)",   # B-C_ 分解（通过前面中心）
                "(C_, E3)",  "(E3, D)",    # C_-D 分解（通过右面中心）
                "(D, E4)",   "(E4, A_)",   # D-A_ 分解（通过后面中心）
            ]

        },
        
        'FBCCZ': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5,  2.5, -2.5]",
                "D = [-2.5,  2.5, -2.5]",
                "A_ = [-2.5, -2.5,  2.5]",
                "B_ = [ 2.5, -2.5,  2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",
                f"O = [{o_coords[0]}, {o_coords[1]}, {o_coords[2]}]"
            ],
            'cylinders': [
                "(A,O)", "(B,O)", "(C,O)", "(D,O)",
                "(A_,O)", "(B_,O)", "(C_,O)", "(D_,O)",
                "(A,B_)", "(B,A_)", "(C,D_)", "(D,C_)",
                "(A,D_)", "(B,C_)", 
            ]   
        },
        
        'FBCCXYZ': {
            'coords': [
                "A = [-2.5,  2.5,  2.5]",
                "B = [ 2.5,  2.5,  2.5]",
                "C = [ 2.5, -2.5,  2.5]",
                "D = [-2.5, -2.5,  2.5]",
                "A_ = [-2.5,  2.5, -2.5]",
                "B_ = [ 2.5,  2.5, -2.5]",
                "C_ = [ 2.5, -2.5, -2.5]",
                "D_ = [-2.5, -2.5, -2.5]",
                f"O = [{o_coords[0]}, {o_coords[1]}, {o_coords[2]}]",

            ],
            'cylinders': [
                "(A, C_)", "(B, D_)", "(C, A_)", "(D, B_)",
                "(A, B_)", "(B, A_)", "(C, D_)", "(D, C_)",
                "(A, D_)", "(D, A_)", "(B, C_)", "(C, B_)",
                "(O, A)", "(O, B)", "(O, C)", "(O, D)",
                "(O, A_)", "(O, B_)", "(O, C_)", "(O, D_)",
                "(A, O)", "(B, O)", "(C, O)", "(D, O)",
                "(A_, O)", "(B_, O)", "(C_, O)", "(D_, O)",
                "(A, C)", "(B, D)", "(A_, C_)", "(B_, D_)",
                "(A, D)", "(B, C)", "(A_, D_)", "(B_, C_)",
                "(A, B)", "(C, D)", "(A_, B_)", "(C_, D_)",
                "(A, A_)", "(B, B_)", "(C, C_)", "(D, D_)"
            ]
        },
        
        'Cuboctahedron_Z': {
        'coords': [
            # === 上层顶点 (y = +2.5) ===
            "A = [-2.5000,  2.5000,  0.0000]",
            "B = [ 0.0000,  2.5000,  2.5000]",
            "C = [ 2.5000,  2.5000,  0.0000]",
            "D = [ 0.0000,  2.5000, -2.5000]",

            # === 下层顶点 (y = -2.5) ===
            "A_ = [-2.5000, -2.5000,  0.0000]",
            "B_ = [ 0.0000, -2.5000,  2.5000]",
            "C_ = [ 2.5000, -2.5000,  0.0000]", 
            "D_ = [ 0.0000, -2.5000, -2.5000]",

            # === 中层侧面顶点 (y = 0) ===
            "S1 = [-2.5000,  0.0000,  2.5000]",
            "S2 = [ 2.5000,  0.0000,  2.5000]",
            "S3 = [ 2.5000,  0.0000, -2.5000]",
            "S4 = [-2.5000,  0.0000, -2.5000]",

            # === 上下面中心点 ===
            "F1 = [ 0.0000,  3,  0.0000]",
            "F2 = [ 0.0000, -3,  0.0000]",

            # === 中心点 ===
            f"O = [{o_coords[0]:8.4f}, {o_coords[1]:8.4f}, {o_coords[2]:8.4f}]"
        ],
        'cylinders': [
            # === 上层四边形 ===
            "(A, B)", "(B, C)", "(C, D)", "(D, A)",
            
            # === 下层四边形 ===
            "(A_, B_)", "(B_, C_)", "(C_, D_)", "(D_, A_)",
            
            # === 侧面连接 ===
            "(S1, B)", "(B, S2)", "(S2, B_)", "(B_, S1)",
            "(S2, C)", "(C, S3)", "(S3, C_)", "(C_, S2)",
            "(S3, D)", "(D, S4)", "(S4, D_)", "(D_, S3)",
            "(S4, A)", "(A, S1)", "(S1, A_)", "(A_, S4)",

            # === 中心点连接 ===
            "(S1, O)", "(S2, O)", "(S3, O)", "(S4, O)",
            "(A, O)", "(B, O)", "(C, O)", "(D, O)",
            "(A_, O)", "(B_, O)", "(C_, O)", "(D_, O)",
            "(F1, O)", "(F2, O)"
        ]
        },
        'Diamond':  {
            'coords': [
                
                "A  = [-2.5,  2.5,  2.5]",
                "B  = [0.0,  2.5,  0.0]",
                "C  = [2.5,  2.5, -2.5]",
                "D  = [-2.5,  0.0,  0.0]",
                "E  = [0.0,  0.0,  2.5]",
                "F  = [2.5,  0.0,  0.0]",
                "G  = [0.0,  0.0, -2.5]",
                "H  = [2.5, -2.5,  2.5]",
                "I  = [0.0, -2.5,  0.0]",
                "J  = [-2.5, -2.5, -2.5]",
                f"S1 = [{-(2+slider)*0.18:.4f}, {(2+slider)*0.18:.4f}, {(2+slider)*0.18:.4f}]",
                f"S2 = [{-(2+slider)*0.18:.4f}, {-(2+slider)*0.18:.4f}, {-(2+slider)*0.18:.4f}]",
                f"S3 = [{(2+slider)*0.18:.4f}, {-(2+slider)*0.18:.4f}, {(2+slider)*0.18:.4f}]",
                f"S4 = [{(2+slider)*0.18:.4f}, {(2+slider)*0.18:.4f}, {-(2+slider)*0.18:.4f}]"
            ],
            'cylinders': [
                "(A, S1)", "(B, S1)", "(D, S1)", "(E, S1)",
                "(D, S2)", "(G, S2)", "(I, S2)", "(J, S2)",
                "(E, S3)", "(F, S3)", "(H, S3)", "(I, S3)",
                "(B, S4)", "(C, S4)", "(F, S4)", "(G, S4)"
            ]
        },        
                
        'Rhombic': {
             'coords': [
                # === Cube vertices (edge length = 5) ===
                "V1 = [-2.5000, -2.5000, -2.5000]",
                "V2 = [ 2.5000, -2.5000, -2.5000]", 
                "V3 = [ 2.5000,  2.5000, -2.5000]",
                "V4 = [-2.5000,  2.5000, -2.5000]",
                "V5 = [-2.5000, -2.5000,  2.5000]",
                "V6 = [ 2.5000, -2.5000,  2.5000]",
                "V7 = [ 2.5000,  2.5000,  2.5000]",
                "V8 = [-2.5000,  2.5000,  2.5000]",

                # === Face centers ===
                "FC1 = [ 0.0000,  0.0000, -2.5000]",  # Bottom face center
                "FC2 = [ 0.0000,  0.0000,  2.5000]",  # Top face center
                "FC3 = [-2.5000,  0.0000,  0.0000]",  # Left face center
                "FC4 = [ 2.5000,  0.0000,  0.0000]",  # Right face center
                "FC5 = [ 0.0000, -2.5000,  0.0000]",  # Front face center
                "FC6 = [ 0.0000,  2.5000,  0.0000]",  # Back face center

                # === Diagonal 1/3 points ===
                f"D13_1 = [-{(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f}]",  # Main diagonal 1/3
                f"D13_2 = [-{(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f}]",  # Cross diagonal 1/3
                f"D13_3 = [-{(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f}]",  # Cross diagonal 1/3
                f"D13_4 = [ {(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f}]",  # Cross diagonal 1/3

                # === Diagonal 2/3 points ===
                f"D23_1 = [ {(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f}]",  # Main diagonal 2/3
                f"D23_2 = [ {(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f}]",  # Cross diagonal 2/3
                f"D23_3 = [ {(2+slider)*0.18:.4f}, -{(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f}]",  # Cross diagonal 2/3
                f"D23_4 = [-{(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f},  {(2+slider)*0.18:.4f}]"   # Cross diagonal 2/3
            ],
            'cylinders': [
                # === Diagonal connections ===
                "(D13_1, D23_1)", "(D13_2, D23_2)", "(D13_3, D23_3)", "(D13_4, D23_4)",

                # === Face centers to diagonal points ===
                "(FC1, D13_1)", "(FC1, D13_3)", "(FC1, D13_4)", "(FC1, D23_2)",
                "(FC2, D23_1)", "(FC2, D23_3)", "(FC2, D23_4)", "(FC2, D13_2)",
                "(FC3, D13_1)", "(FC3, D13_2)", "(FC3, D13_3)", "(FC3, D23_4)",
                "(FC4, D23_1)", "(FC4, D23_2)", "(FC4, D23_3)", "(FC4, D13_4)",
                "(FC5, D13_1)", "(FC5, D13_2)", "(FC5, D13_4)", "(FC5, D23_3)",
                "(FC6, D23_1)", "(FC6, D23_2)", "(FC6, D23_4)", "(FC6, D13_3)",

                # === Cube vertices to closest dodecahedron vertices (8 connections) ===
                "(V1, D13_1)",  # V1 to closest diagonal point
                "(V2, D13_4)",  # V2 to closest diagonal point
                "(V3, D23_2)",  # V3 to closest diagonal point
                "(V4, D13_3)",  # V4 to closest diagonal point
                "(V5, D13_2)",  # V5 to closest diagonal point
                "(V6, D23_3)",  # V6 to closest diagonal point
                "(V7, D23_1)",  # V7 to closest diagonal point
                "(V8, D23_4)"   # V8 to closest diagonal point
            ]
        },
        
        'Auxetic': {
            'coords': [
                # === 顶面沙漏形 (z=+2.5) ===
                "T_TL = [-2.5000,  2.5000,  2.5000]",
                "T_TR = [ 2.5000,  2.5000,  2.5000]",
                "T_BL = [-2.5000, -2.5000,  2.5000]",
                "T_BR = [ 2.5000, -2.5000,  2.5000]",
                f"T_WL = [-{(1+slider)*0.2:.4f},  0.0000,  2.5000]",
                f"T_WR = [ {(1+slider)*0.2:.4f},  0.0000,  2.5000]",

                # === 底面沙漏形 (z=-2.5) ===
                "B_TL = [-2.5000,  2.5000, -2.5000]",
                "B_TR = [ 2.5000,  2.5000, -2.5000]",
                "B_BL = [-2.5000, -2.5000, -2.5000]",
                "B_BR = [ 2.5000, -2.5000, -2.5000]",
                f"B_WL = [-{(1+slider)*0.2:.4f},  0.0000, -2.5000]",
                f"B_WR = [ {(1+slider)*0.2:.4f},  0.0000, -2.5000]",

                # === 前面沙漏形 (y=+2.5) ===
                "F_TL = [-2.5000,  2.5000,  2.5000]",
                "F_TR = [ 2.5000,  2.5000,  2.5000]",
                f"F_WL = [-{(1+slider)*0.2:.4f},  2.5000,  0.0000]",
                f"F_WR = [ {(1+slider)*0.2:.4f},  2.5000,  0.0000]",
                "F_BL = [-2.5000,  2.5000, -2.5000]",
                "F_BR = [ 2.5000,  2.5000, -2.5000]",

                # === 后面沙漏形 (y=-2.5) ===
                "K_TL = [-2.5000, -2.5000,  2.5000]",
                "K_TR = [ 2.5000, -2.5000,  2.5000]",
                "K_BL = [-2.5000, -2.5000, -2.5000]",
                "K_BR = [ 2.5000, -2.5000, -2.5000]",
                f"K_WL = [-{(1+slider)*0.2:.4f}, -2.5000,  0.0000]",
                f"K_WR = [ {(1+slider)*0.2:.4f}, -2.5000,  0.0000]",

                # === 右左面中心 ===
                "RF = [ 2.5000,  0.0000,  0.0000]",
                "LF = [-2.5000,  0.0000,  0.0000]",

                # === 腰部角点 ===
                "WC1 = [-2.5000,  0.0000,  2.5000]",
                "WC2 = [ 2.5000,  0.0000,  2.5000]",
                "WC3 = [ 2.5000,  0.0000, -2.5000]",
                "WC4 = [-2.5000,  0.0000, -2.5000]",
                "WC5 = [-2.5000,  2.5000,  0.0000]",
                "WC6 = [ 2.5000,  2.5000,  0.0000]",
                "WC7 = [ 2.5000, -2.5000,  0.0000]",
                "WC8 = [-2.5000, -2.5000,  0.0000]"
            ],
            'cylinders': [
                # === 顶面连接 ===
                "(T_TL, T_TR)", "(T_BL, T_BR)",
                "(T_TL, T_WL)", "(T_TR, T_WR)", "(T_BL, T_WL)", "(T_BR, T_WR)",

                # === 底面连接 ===
                "(B_TL, B_TR)", "(B_BL, B_BR)",
                "(B_TL, B_WL)", "(B_TR, B_WR)", "(B_BL, B_WL)", "(B_BR, B_WR)",

                # === 前面连接 ===
                "(F_TL, F_TR)", "(F_BL, F_BR)",
                "(F_TL, F_WL)", "(F_TR, F_WR)", "(F_BL, F_WL)", "(F_BR, F_WR)",

                # === 后面连接 ===
                "(K_TL, K_TR)", "(K_BL, K_BR)",
                "(K_TL, K_WL)", "(K_TR, K_WR)", "(K_BL, K_WL)", "(K_BR, K_WR)",

                # === 连接到面中心 ===
                "(RF, F_WR)", "(RF, T_WR)", "(RF, B_WR)", "(RF, K_WR)",
                "(LF, F_WL)", "(LF, T_WL)", "(LF, B_WL)", "(LF, K_WL)",

                # === 连接到腰部角点 ===
                "(T_WL, WC1)", "(T_WR, WC2)", "(B_WR, WC3)", "(B_WL, WC4)",
                "(F_WL, WC5)", "(F_WR, WC6)", "(K_WR, WC7)", "(K_WL, WC8)"
            ]
            },

        'Truncated_cube': {
            'coords': [
                f"A1 = [-2.5,  2.5,  {(3+slider/3)*0.2:.1f}]",
                f"A2 = [-2.5,  {(3+slider/3)*0.2:.1f},  2.5]",
                f"A3 = [-{(3+slider/3)*0.2:.1f},  2.5,  2.5]",

                f"B1 = [ 2.5,  2.5,  {(3+slider/3)*0.2:.1f}]",
                f"B2 = [ 2.5,  {(3+slider/3)*0.2:.1f},  2.5]",
                f"B3 = [ {(3+slider/3)*0.2:.1f},  2.5,  2.5]",

                f"C1 = [ 2.5, -2.5,  {(3+slider/3)*0.2:.1f}]",
                f"C2 = [ 2.5, -{(3+slider/3)*0.2:.1f},  2.5]",
                f"C3 = [ {(3+slider/3)*0.2:.1f}, -2.5,  2.5]",

                f"D1 = [-2.5, -2.5,  {(3+slider/3)*0.2:.1f}]",
                f"D2 = [-2.5, -{(3+slider/3)*0.2:.1f},  2.5]",
                f"D3 = [-{(3+slider/3)*0.2:.1f}, -2.5,  2.5]",

                f"A_1 = [-2.5,  2.5, -{(3+slider/3)*0.2:.1f}]",
                f"A_2 = [-2.5,  {(3+slider/3)*0.2:.1f}, -2.5]",
                f"A_3 = [-{(3+slider/3)*0.2:.1f},  2.5, -2.5]",

                f"B_1 = [ 2.5,  2.5, -{(3+slider/3)*0.2:.1f}]",
                f"B_2 = [ 2.5,  {(3+slider/3)*0.2:.1f}, -2.5]",
                f"B_3 = [ {(3+slider/3)*0.2:.1f},  2.5, -2.5]",

                f"C_1 = [ 2.5, -2.5, -{(3+slider/3)*0.2:.1f}]",
                f"C_2 = [ 2.5, -{(3+slider/3)*0.2:.1f}, -2.5]",
                f"C_3 = [ {(3+slider/3)*0.2:.1f}, -2.5, -2.5]",

                f"D_1 = [-2.5, -2.5, -{(3+slider/3)*0.2:.1f}]",
                f"D_2 = [-2.5, -{(3+slider/3)*0.2:.1f}, -2.5]",
                f"D_3 = [-{(3+slider/3)*0.2:.1f}, -2.5, -2.5]"
            ],
            'cylinders': [
                # 上面四条边（原 A-B-C-D 环） —— 连接每边上对应 z=2.5 的替代点（ *_3 或 *_2 取决于轴向）
                "(A3, B3)",
                "(B2, C2)",
                "(C3, D3)",
                "(D2, A2)",

                # 下面四条边（原 A_-B_-C_-D_ 环）
                "(A_3, B_3)",
                "(B_2, C_2)",
                "(C_3, D_3)",
                "(D_2, A_2)",

                # 四个竖直连杆（原 A-A_, B-B_, C-C_, D-D_） —— 连接 x,y 固定的两个点（*_1 与 *_1）
                "(A1, A_1)",
                "(B1, B_1)",
                "(C1, C_1)",
                "(D1, D_1)",

                # 每个角的三角面（将原角替换为小三角形） — 对应 8 个角，每个角连三条边
                # 顶面角（A,B,C,D）
                "(A1, A2)",
                "(A2, A3)",
                "(A3, A1)",

                "(B1, B2)",
                "(B2, B3)",
                "(B3, B1)",

                "(C1, C2)",
                "(C2, C3)",
                "(C3, C1)",

                "(D1, D2)",
                "(D2, D3)",
                "(D3, D1)",

                # 底面角（A_,B_,C_,D_）
                "(A_1, A_2)",
                "(A_2, A_3)",
                "(A_3, A_1)",

                "(B_1, B_2)",
                "(B_2, B_3)",
                "(B_3, B_1)",

                "(C_1, C_2)",
                "(C_2, C_3)",
                "(C_3, C_1)",

                "(D_1, D_2)",
                "(D_2, D_3)",
                "(D_3, D_1)"
            ]

        },

        'Kelvin': {
           'coords': [
        # 参数： a (ring side) = 2 -> d = a/sqrt(2) = 1.4142 ; face half-length = 2.5
        # Top (z = +2.5)
        f"T1 = [ 0.0000,  {(4+slider)*0.1:.4f},  2.5000]",
        f"T2 = [ {(4+slider)*0.1:.4f},  0.0000,  2.5000]",
        f"T3 = [ 0.0000, -{(4+slider)*0.1:.4f},  2.5000]",
        f"T4 = [-{(4+slider)*0.1:.4f},  0.0000,  2.5000]",

        # Bottom (z = -2.5)
        f"Bt1 = [ 0.0000,  {(4+slider)*0.1:.4f}, -2.5000]",
        f"Bt2 = [ {(4+slider)*0.1:.4f},  0.0000, -2.5000]",
        f"Bt3 = [ 0.0000, -{(4+slider)*0.1:.4f}, -2.5000]",
        f"Bt4 = [-{(4+slider)*0.1:.4f},  0.0000, -2.5000]",

        # Front (y = +2.5)
        f"F1 = [ 0.0000,  2.5000,  {(4+slider)*0.1:.4f}]",
        f"F2 = [ {(4+slider)*0.1:.4f},  2.5000,  0.0000]",
        f"F3 = [ 0.0000,  2.5000, -{(4+slider)*0.1:.4f}]",
        f"F4 = [-{(4+slider)*0.1:.4f},  2.5000,  0.0000]",

        # Back (y = -2.5)
        f"Ba1 = [ 0.0000, -2.5000,  {(4+slider)*0.1:.4f}]",
        f"Ba2 = [ {(4+slider)*0.1:.4f}, -2.5000,  0.0000]",
        f"Ba3 = [ 0.0000, -2.5000, -{(4+slider)*0.1:.4f}]",
        f"Ba4 = [-{(4+slider)*0.1:.4f}, -2.5000,  0.0000]",

        # Right (x = +2.5)
        f"R1 = [ 2.5000,  0.0000,  {(4+slider)*0.1:.4f}]",
        f"R2 = [ 2.5000,  {(4+slider)*0.1:.4f},  0.0000]",
        f"R3 = [ 2.5000,  0.0000, -{(4+slider)*0.1:.4f}]",
        f"R4 = [ 2.5000, -{(4+slider)*0.1:.4f},  0.0000]",

        # Left (x = -2.5)
        f"L1 = [-2.5000,  0.0000,  {(4+slider)*0.1:.4f}]",
        f"L2 = [-2.5000,  {(4+slider)*0.1:.4f},  0.0000]",
        f"L3 = [-2.5000,  0.0000, -{(4+slider)*0.1:.4f}]",
        f"L4 = [-2.5000, -{(4+slider)*0.1:.4f},  0.0000]"
    ],

    'cylinders': [
        # 每个外推正方形的边（内部环）
        "(T1, T2)", "(T2, T3)", "(T3, T4)", "(T4, T1)",
        "(Bt1, Bt2)", "(Bt2, Bt3)", "(Bt3, Bt4)", "(Bt4, Bt1)",
        "(F1, F2)", "(F2, F3)", "(F3, F4)", "(F4, F1)",
        "(Ba1, Ba2)", "(Ba2, Ba3)", "(Ba3, Ba4)", "(Ba4, Ba1)",
        "(R1, R2)", "(R2, R3)", "(R3, R4)", "(R4, R1)",
        "(L1, L2)", "(L2, L3)", "(L3, L4)", "(L4, L1)",

        # 邻面之间的对应点连接（形成空间框架）
        # Top <-> Front, Right, Back, Left
        "(T1, F1)",   # T +y  <-> Front +z
        "(T2, R1)",   # T +x  <-> Right +z
        "(T3, Ba1)",  # T -y  <-> Back +z
        "(T4, L1)",   # T -x  <-> Left +z

        # Bottom <-> Front/Right/Back/Left
        "(Bt1, F3)",
        "(Bt2, R3)",
        "(Bt3, Ba3)",
        "(Bt4, L3)",

        # Front <-> Right & Left (侧面环连接)
        "(F2, R2)",
        "(F4, L2)",

        # Back <-> Right & Left
        "(Ba2, R4)",
        "(Ba4, L4)"
    ],


    'cylinders': [
        # 每个外推正方形的边（内部环）
        "(T1, T2)", "(T2, T3)", "(T3, T4)", "(T4, T1)",
        "(Bt1, Bt2)", "(Bt2, Bt3)", "(Bt3, Bt4)", "(Bt4, Bt1)",
        "(F1, F2)", "(F2, F3)", "(F3, F4)", "(F4, F1)",
        "(Ba1, Ba2)", "(Ba2, Ba3)", "(Ba3, Ba4)", "(Ba4, Ba1)",
        "(R1, R2)", "(R2, R3)", "(R3, R4)", "(R4, R1)",
        "(L1, L2)", "(L2, L3)", "(L3, L4)", "(L4, L1)",

        # 邻面之间的对应点连接（形成空间框架）
        # Top <-> Front, Right, Back, Left
        "(T1, F1)",   # T +y  <-> Front +z
        "(T2, R1)",   # T +x  <-> Right +z
        "(T3, Ba1)",  # T -y  <-> Back +z
        "(T4, L1)",   # T -x  <-> Left +z

        # Bottom <-> Front/Right/Back/Left
        "(Bt1, F3)",
        "(Bt2, R3)",
        "(Bt3, Ba3)",
        "(Bt4, L3)",

        # Front <-> Right & Left (侧面环连接)
        "(F2, R2)",
        "(F4, L2)",

        # Back <-> Right & Left
        "(Ba2, R4)",
        "(Ba4, L4)"
    ]
    },
    'Truncated_Octoctahedron': generate_truncated_cuboctahedron(S=2.5, slider=slider),
    'Octahedron': {
            'coords': [
                "A = [ 0.0000,  0.0000,  2.5000]",  # Top vertex
                "B = [ 2.5000,  0.0000,  0.0000]",  # Right vertex
                "C = [ 0.0000,  2.5000,  0.0000]",  # Front vertex
                "D = [-2.5000,  0.0000,  0.0000]",  # Left vertex
                "E = [ 0.0000, -2.5000,  0.0000]",  # Back vertex
                "F = [ 0.0000,  0.0000, -2.5000]"   # Bottom vertex
            ],
            'cylinders': [
                "(A, B)", "(A, C)", "(A, D)", "(A, E)",
                "(F, B)", "(F, C)", "(F, D)", "(F, E)",
                "(B, C)", "(C, D)", "(D, E)", "(E, B)"
            ]
        },

    'Cubic_Rosette_self_create': {
    'coords': [
        # 参数：外接立方体边长 = 5 -> 面半长度 = 2.5
        # 内部小正方形边长 = 2.0，边的1/4点距离 = 1.0
        
        # Top face octahedron (z = +2.5)
        # 内部小正方形的4个顶点
        f"T1 = [ {(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f},  2.5000]",  # 右上
        f"T2 = [ {(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f},  2.5000]",  # 右下
        f"T3 = [-{(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f},  2.5000]",  # 左下
        f"T4 = [-{(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f},  2.5000]",  # 左上
        # 每条边的1/4点
        "T5 = [ 2.5000,  0.0000,  2.5000]",  # 右边中点
        "T6 = [ 0.0000, -2.5000,  2.5000]",  # 下边中点
        "T7 = [-2.5000,  0.0000,  2.5000]",  # 左边中点
        "T8 = [ 0.0000,  2.5000,  2.5000]",  # 上边中点

        # Bottom face octahedron (z = -2.5)
        f"Bt1 = [ {(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f}, -2.5000]",
        f"Bt2 = [ {(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f}, -2.5000]",
        f"Bt3 = [-{(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f}, -2.5000]",
        f"Bt4 = [-{(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f}, -2.5000]",
        "Bt5 = [ 2.5000,  0.0000, -2.5000]",
        "Bt6 = [ 0.0000, -2.5000, -2.5000]",
        "Bt7 = [-2.5000,  0.0000, -2.5000]",
        "Bt8 = [ 0.0000,  2.5000, -2.5000]",

        # Front face octahedron (y = +2.5)
        f"F1 = [ {(2+slider)*0.2:.4f},  2.5000,  {(2+slider)*0.2:.4f}]",
        f"F2 = [ {(2+slider)*0.2:.4f},  2.5000, -{(2+slider)*0.2:.4f}]",
        f"F3 = [-{(2+slider)*0.2:.4f},  2.5000, -{(2+slider)*0.2:.4f}]",
        f"F4 = [-{(2+slider)*0.2:.4f},  2.5000,  {(2+slider)*0.2:.4f}]",
        "F5 = [ 2.5000,  2.5000,  0.0000]",
        "F6 = [ 0.0000,  2.5000, -2.5000]",
        "F7 = [-2.5000,  2.5000,  0.0000]",
        "F8 = [ 0.0000,  2.5000,  2.5000]",

        # Back face octahedron (y = -2.5)
        f"Ba1 = [ {(2+slider)*0.2:.4f}, -2.5000,  {(2+slider)*0.2:.4f}]",
        f"Ba2 = [ {(2+slider)*0.2:.4f}, -2.5000, -{(2+slider)*0.2:.4f}]",
        f"Ba3 = [-{(2+slider)*0.2:.4f}, -2.5000, -{(2+slider)*0.2:.4f}]",
        f"Ba4 = [-{(2+slider)*0.2:.4f}, -2.5000,  {(2+slider)*0.2:.4f}]",
        "Ba5 = [ 2.5000, -2.5000,  0.0000]",
        "Ba6 = [ 0.0000, -2.5000, -2.5000]",
        "Ba7 = [-2.5000, -2.5000,  0.0000]",
        "Ba8 = [ 0.0000, -2.5000,  2.5000]",

        # Right face octahedron (x = +2.5)
        f"R1 = [ 2.5000,  {(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f}]",
        f"R2 = [ 2.5000,  {(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f}]",
        f"R3 = [ 2.5000, -{(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f}]",
        f"R4 = [ 2.5000, -{(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f}]",
        "R5 = [ 2.5000,  2.5000,  0.0000]",
        "R6 = [ 2.5000,  0.0000, -2.5000]",
        "R7 = [ 2.5000, -2.5000,  0.0000]",
        "R8 = [ 2.5000,  0.0000,  2.5000]",

        # Left face octahedron (x = -2.5)
        f"L1 = [-2.5000,  {(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f}]",
        f"L2 = [-2.5000,  {(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f}]",
        f"L3 = [-2.5000, -{(2+slider)*0.2:.4f}, -{(2+slider)*0.2:.4f}]",
        f"L4 = [-2.5000, -{(2+slider)*0.2:.4f},  {(2+slider)*0.2:.4f}]",
        "L5 = [-2.5000,  2.5000,  0.0000]",
        "L6 = [-2.5000,  0.0000, -2.5000]",
        "L7 = [-2.5000, -2.5000,  0.0000]",
        "L8 = [-2.5000,  0.0000,  2.5000]"
    ],

    'cylinders': [
        # 每个面的八面体边（内部小正方形 + 连接到边中点）
        # Top face octahedron
        "(T1, T5)", "(T5, T2)", "(T2, T6)", "(T6, T3)", 
        "(T3, T7)", "(T7, T4)", "(T4, T8)", "(T8, T1)",

        # Bottom face octahedron  
        "(Bt1, Bt5)", "(Bt5, Bt2)", "(Bt2, Bt6)", "(Bt6, Bt3)",
        "(Bt3, Bt7)", "(Bt7, Bt4)", "(Bt4, Bt8)", "(Bt8, Bt1)",

        # Front face octahedron
        "(F1, F5)", "(F5, F2)", "(F2, F6)", "(F6, F3)",
        "(F3, F7)", "(F7, F4)", "(F4, F8)", "(F8, F1)",

        # Back face octahedron
        "(Ba1, Ba5)", "(Ba5, Ba2)", "(Ba2, Ba6)", "(Ba6, Ba3)",
        "(Ba3, Ba7)", "(Ba7, Ba4)", "(Ba4, Ba8)", "(Ba8, Ba1)",

        # Right face octahedron
        "(R1, R5)", "(R5, R2)", "(R2, R6)", "(R6, R3)",
        "(R3, R7)", "(R7, R4)", "(R4, R8)", "(R8, R1)",

        # Left face octahedron
        "(L1, L5)", "(L5, L2)", "(L2, L6)", "(L6, L3)",
        "(L3, L7)", "(L7, L4)", "(L4, L8)", "(L8, L1)",

        # 面间连接（相邻八面体边中点之间的连接）
        # Top <-> Front/Right/Back/Left (边中点连接)
        "(T8, F8)", "(T5, R8)", "(T6, Ba8)", "(T7, L8)",

        # Bottom <-> Front/Right/Back/Left  
        "(Bt8, F6)", "(Bt5, R6)", "(Bt6, Ba6)", "(Bt7, L6)",

        # Front <-> Right & Left (侧面边中点连接)
        "(F5, R5)", "(F7, L5)",

        # Back <-> Right & Left
        "(Ba5, R7)", "(Ba7, L7)"
    ]
    
    }
    }
    if structure_name not in structures:
        available = list(structures.keys())
        return f"结构 '{structure_name}' 不存在。可用结构: {', '.join(available)}"
    
    structure = structures[structure_name]
    
    result = f"# {structure_name} structure\n"
    result += "# 定义关键点坐标\n"
    for coord in structure['coords']:
        result += coord + "\n"
    
    result += "\n# 定义圆柱体连接\n"
    result += "cylinders = [\n"
    for i, cylinder in enumerate(structure['cylinders']):
        if i == len(structure['cylinders']) - 1:
            result += f"    {cylinder}\n"
        else:
            result += f"    {cylinder},\n"
    result += "]\n"
    
    return result

# 使用示例
if __name__ == "__main__":
    # 测试几个结构
    test_structures = ['BCCZ', 'FCC', 'Diamond', 'Octahedron']
    
    for struct in test_structures:
        print("="*60)
        print(get_crystal_structure(struct))
        print()